{"version":3,"sources":["constant.js","reducers.js","WeatherInputComponent.js","WeatherDetailComponent.js","api.js","actions.js","WeatherContainer.js","App.js","index.js","registerServiceWorker.js"],"names":["appConstant","initialState","isLoading","weatherDetail","cityList","WeatherInputComponent","props","React","useState","value","setValue","Autocomplete","id","freeSolo","onChange","event","newValue","getWeather","options","map","option","title","renderInput","params","TextField","label","margin","variant","fullWidth","useStyles","makeStyles","table","minWidth","mainHeader","fontWeight","header","WeatherDetailComponent","classes","TableContainer","component","Paper","Table","className","aria-label","TableHead","TableRow","TableCell","colSpan","align","TableBody","obj","timeStamp","weather","head","key","dt","Intl","DateTimeFormat","undefined","weekday","month","day","hour","minute","second","format","Date","alt","src","width","height","getApiResponse","payload","fetch","then","res","json","getCityListAction","dispatch","type","resp","Promise","resolve","reject","getWeatherAction","URL","getCityWeatherService","list","WeatherContainer","getCityList","this","CircularProgress","isEmpty","Component","connect","state","store","createStore","action","applyMiddleware","thunk","App","ReactDOM","render","document","getElementById","navigator","window","addEventListener","swUrl","process","serviceWorker","register","registration","onupdatefound","installingWorker","installing","onstatechange","controller","console","log","catch","error"],"mappings":"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","file":"static/js/main.01704ae9.chunk.js","sourcesContent":["export const appConstant={\r\n    GET_CITY_REQUEST:'GET_CITY_REQUEST',\r\n    GET_CITY_RESPONSE: 'GET_CITY_RESPONSE',\r\n    WEATHER_RESPONSE: 'WEATHER_RESPONSE',\r\n    LOADING:'LOADING',\r\n}","import { appConstant } from './constant';\r\n\r\nconst initialState = {\r\n    isLoading:false,\r\n    weatherDetail:[],\r\n    cityList:[],\r\n}\r\n\r\nexport const rootReducer = (state=initialState, action) =>{\r\n    switch(action.type){\r\n        case appConstant.LOADING:\r\n            return {isLoading:true, ...state};\r\n        case appConstant.GET_CITY_RESPONSE:\r\n            return {...state, cityList:action.cityList, isLoading:false};\r\n        case appConstant.WEATHER_RESPONSE:\r\n            return {...state, weatherDetail:action.weatherDetail, isLoading:false};\r\n        default:\r\n            return {...state};      \r\n    }\r\n}","import React from 'react';\r\nimport TextField from '@material-ui/core/TextField';\r\nimport Autocomplete from '@material-ui/lab/Autocomplete';\r\n\r\nconst WeatherInputComponent = props =>{\r\n    const [value,setValue] = React.useState(null);\r\n    return <Autocomplete\r\n                id=\"free-solo-demo\"\r\n                freeSolo\r\n                value={value}\r\n                onChange={(event, newValue) => {\r\n                    props.getWeather(newValue);\r\n                    setValue(newValue);\r\n                    return;\r\n                }}\r\n                options={props.cityList && props.cityList.map(option => option.title)}\r\n                renderInput={params => (\r\n                    <TextField {...params} label=\"freeSolo\" margin=\"normal\" variant=\"outlined\" fullWidth />\r\n                )}\r\n            />\r\n}\r\n\r\nexport default WeatherInputComponent;","import React from 'react';\r\nimport { head } from 'lodash';\r\nimport { makeStyles } from '@material-ui/core/styles';\r\nimport Table from '@material-ui/core/Table';\r\nimport TableBody from '@material-ui/core/TableBody';\r\nimport TableCell from '@material-ui/core/TableCell';\r\nimport TableContainer from '@material-ui/core/TableContainer';\r\nimport TableHead from '@material-ui/core/TableHead';\r\nimport TableRow from '@material-ui/core/TableRow';\r\nimport Paper from '@material-ui/core/Paper';\r\n\r\nconst useStyles = makeStyles({\r\n    table: {\r\n      minWidth: 650,\r\n    },\r\n    mainHeader:{\r\n        fontWeight:900,\r\n    },\r\n    header:{\r\n        fontWeight:800,\r\n    }\r\n});\r\n\r\nconst WeatherDetailComponent = props =>{\r\n\r\n    const classes = useStyles();\r\n\r\n    const getTime = timeStamp=>{\r\n        var options = {\r\n            weekday: 'short',\r\n            month: 'short',\r\n            day: 'numeric',\r\n            hour: 'numeric', minute: 'numeric', second: 'numeric', \r\n        },\r\n        intlDate = new Intl.DateTimeFormat( undefined, options );\r\n        return intlDate.format( new Date( 1000 * timeStamp) );\r\n    }\r\n    return  <TableContainer component={Paper}>\r\n                <Table className={classes.table} aria-label=\"simple table\">\r\n                <TableHead className={classes.header}>\r\n                    <TableRow>\r\n                        <TableCell colSpan=\"3\" align=\"left\"></TableCell>\r\n                        <TableCell className={classes.mainHeader} colSpan=\"2\" align=\"left\">Conditions</TableCell>\r\n                        <TableCell className={classes.mainHeader} colSpan=\"2\" align=\"left\">Comfort</TableCell>\r\n                    </TableRow>\r\n                </TableHead>    \r\n                <TableHead>\r\n                    <TableRow>\r\n                        <TableCell className={classes.header} align=\"left\">Date & Time</TableCell>\r\n                        <TableCell className={classes.header} align=\"left\"></TableCell>\r\n                        <TableCell className={classes.header} align=\"left\">Temperature</TableCell>\r\n                        <TableCell className={classes.header} align=\"left\">Weather</TableCell>\r\n                        <TableCell className={classes.header} align=\"left\">Humidity</TableCell>\r\n                        <TableCell className={classes.header} align=\"left\">Wind Speed</TableCell>\r\n                        <TableCell className={classes.header} align=\"left\">Feels like</TableCell>\r\n                    </TableRow>\r\n                </TableHead>\r\n                <TableBody>\r\n                {props.weatherDetail.map(obj=>{\r\n                    const weather=head(obj['weather']);\r\n                    return <TableRow key={obj.dt}>\r\n                                <TableCell align=\"left\">{getTime(obj.dt)}</TableCell>\r\n                                <TableCell align=\"left\"><img alt={obj.dt} src={`https://openweathermap.org/img/w/${weather['icon']}.png`} width=\"40\" height=\"40\"/></TableCell>\r\n                                <TableCell align=\"left\">\r\n                                    {`${obj['main']['temp_min']}/${obj['main']['temp_max']} °C`}\r\n                                </TableCell>\r\n                                <TableCell align=\"left\">{`${weather['main']} (${weather['description']})`}</TableCell>\r\n                                <TableCell align=\"left\">{`${obj['main']['humidity']}%`}</TableCell>\r\n                                <TableCell align=\"left\">{`${obj['wind']['speed']}mps`}</TableCell>\r\n                                <TableCell align=\"left\">{obj['main']['temp']}</TableCell>\r\n                            </TableRow>\r\n                        })}\r\n                    </TableBody>\r\n                </Table>\r\n            </TableContainer>    \r\n}\r\n\r\nexport default WeatherDetailComponent;","const getApiResponse = payload =>{\r\n    return fetch(payload)\r\n    .then(res=> res)\r\n    .then(res=>res.json());    \r\n}\r\n\r\n\r\nexport const getCityListService = () =>{\r\n    const URL = \"https://pl2ern4.github.io/weather-cities/\";\r\n    let cityList=[];\r\n    return getApiResponse(URL).then(resp=>{\r\n        return new Promise((resolve,reject)=>{\r\n            cityList=resp.map(obj=>({\"title\":obj[\"city\"][\"name\"],\"id\":obj[\"city\"][\"id\"][\"$numberLong\"]}));\r\n            resolve(cityList);\r\n        }).then(resp=>resp);\r\n    })\r\n}\r\n\r\nexport const getCityWeatherService = payload=>{\r\n    const URL= `https://api.openweathermap.org/data/2.5/forecast?id=${((payload && payload.id)||'14256')}&APPID=771d67e00059108e0fb1d280194d3bf2`;\r\n    return getApiResponse(URL).then(resp=>resp);\r\n}","import { getCityListService, getCityWeatherService } from './api';\r\nimport { appConstant } from './constant';\r\n\r\nexport const getCityListAction = payload =>{\r\n    return dispatch=>{\r\n        dispatch({type:appConstant.LOADING})\r\n        getCityListService().then(resp=>{\r\n            if(resp){\r\n                dispatch({\r\n                    type: appConstant.GET_CITY_RESPONSE,\r\n                    cityList:resp\r\n                });\r\n        }\r\n    })\r\n}}\r\n\r\nexport const getWeatherAction = payload =>{\r\n    return dispatch=>{\r\n        dispatch({type:appConstant.LOADING});\r\n        getCityWeatherService(payload)\r\n        .then(resp=>{\r\n            dispatch({\r\n                type:appConstant.WEATHER_RESPONSE,\r\n                weatherDetail:resp.list\r\n            });\r\n        })\r\n    }\r\n}","import React,{ Component } from 'react';\r\nimport {connect} from 'react-redux'; \r\nimport {isEmpty} from 'lodash';\r\nimport CircularProgress from '@material-ui/core/CircularProgress';\r\nimport WeatherInputComponent from './WeatherInputComponent';\r\nimport WeatherDetailComponent from './WeatherDetailComponent';\r\nimport { getCityListAction, getWeatherAction } from './actions';\r\n\r\nclass WeatherContainer extends Component{\r\n    \r\n    constructor(props){\r\n        super(props);\r\n        props.getCityList();\r\n    }\r\n\r\n    getWeather=payload=> this.props.getWeather(payload);\r\n\r\n    render(){\r\n        const {cityList, weatherDetail, isLoading} = this.props;\r\n\r\n        return(\r\n            <>\r\n                <WeatherInputComponent cityList={cityList} getWeather={this.getWeather}/>\r\n                {isLoading && <CircularProgress />}\r\n                {((!isEmpty(weatherDetail) && <WeatherDetailComponent weatherDetail={weatherDetail}/>) || null)}\r\n            </>\r\n        )\r\n    }\r\n}\r\n\r\nconst mapStateToProps = state =>{\r\n    return {\r\n        isLoading: state.isLoading,\r\n        cityList: state.cityList||[],\r\n        weatherDetail: state.weatherDetail||[]\r\n    }\r\n}\r\n\r\nconst mapDispatchToProps = dispatch =>({\r\n    getCityList : ()=>getCityListAction()(dispatch),\r\n    getWeather :  params=>getWeatherAction(params)(dispatch)    \r\n})\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(WeatherContainer);","import React from 'react';\r\nimport {Provider} from 'react-redux';\r\nimport { createStore, applyMiddleware } from 'redux';\r\nimport thunk from 'redux-thunk';\r\nimport './App.css';\r\nimport {rootReducer} from './reducers';\r\nimport WeatherContainer from './WeatherContainer';\r\n\r\nconst store = createStore(rootReducer, \r\n                        applyMiddleware(thunk));\r\n\r\nconst App = props => <Provider store={store}><WeatherContainer/></Provider>\r\n\r\nexport default App;","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport App from './App';\r\nimport registerServiceWorker from './registerServiceWorker';\r\nimport './index.css';\r\n\r\nReactDOM.render(<App />, document.getElementById('root'));\r\nregisterServiceWorker();\r\n","// In production, we register a service worker to serve assets from local cache.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on the \"N+1\" visit to a page, since previously\r\n// cached resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model, read https://goo.gl/KwvDNy.\r\n// This link also includes instructions on opting out of this behavior.\r\n\r\nexport default function register() {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n      navigator.serviceWorker\r\n        .register(swUrl)\r\n        .then(registration => {\r\n          registration.onupdatefound = () => {\r\n            const installingWorker = registration.installing;\r\n            installingWorker.onstatechange = () => {\r\n              if (installingWorker.state === 'installed') {\r\n                if (navigator.serviceWorker.controller) {\r\n                  // At this point, the old content will have been purged and\r\n                  // the fresh content will have been added to the cache.\r\n                  // It's the perfect time to display a \"New content is\r\n                  // available; please refresh.\" message in your web app.\r\n                  console.log('New content is available; please refresh.');\r\n                } else {\r\n                  // At this point, everything has been precached.\r\n                  // It's the perfect time to display a\r\n                  // \"Content is cached for offline use.\" message.\r\n                  console.log('Content is cached for offline use.');\r\n                }\r\n              }\r\n            };\r\n          };\r\n        })\r\n        .catch(error => {\r\n          console.error('Error during service worker registration:', error);\r\n        });\r\n    });\r\n  }\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n"],"sourceRoot":""}