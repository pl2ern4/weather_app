{"version":3,"sources":["constant.js","reducers.js","WeatherInputComponent.js","WeatherDetailComponent.js","api.js","actions.js","WeatherContainer.js","App.js","index.js","registerServiceWorker.js"],"names":["appConstant","initialState","isLoading","weatherDetail","cityList","WeatherInputComponent","props","useState","selectedValue","setSelectedValue","length","showOption","setshowOption","type","className","onChange","e","throttle","target","value","getCityList","required","map","obj","key","id","onClick","title","getWeather","handleClickCityOption","useStyles","makeStyles","table","minWidth","zIndex","position","mainHeader","fontWeight","header","WeatherDetailComponent","classes","TableContainer","component","Paper","Table","aria-label","TableHead","TableRow","TableCell","colSpan","align","TableBody","timeStamp","weather","head","dt","Intl","DateTimeFormat","undefined","weekday","month","day","hour","minute","second","format","Date","alt","src","width","height","headers","getApiResponse","payload","fetch","method","then","res","json","getCityListAction","dispatch","URL","city","resp","Promise","resolve","reject","data","getCityListService","getWeatherAction","getCityWeatherService","list","WeatherContainer","state","isEmptyTextbox","this","CircularProgress","isEmpty","Component","connect","params","store","createStore","action","newState","composeWithDevTools","applyMiddleware","thunk","App","ReactDOM","render","document","getElementById","navigator","window","addEventListener","swUrl","process","serviceWorker","register","registration","onupdatefound","installingWorker","installing","onstatechange","controller","console","log","catch","error"],"mappings":"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","file":"static/js/main.620e1ca3.chunk.js","sourcesContent":["export const appConstant={\r\n    GET_CITY_REQUEST:'GET_CITY_REQUEST',\r\n    GET_CITY_RESPONSE: 'GET_CITY_RESPONSE',\r\n    WEATHER_RESPONSE: 'WEATHER_RESPONSE',\r\n    LOADING:'LOADING',\r\n}","import { appConstant } from './constant';\r\n\r\nconst initialState = {\r\n    isLoading:false,\r\n    weatherDetail:[],\r\n    cityList:[],\r\n}\r\n\r\nexport const rootReducer = (state=initialState, action) =>{\r\n    switch(action.type){\r\n        case appConstant.LOADING:\r\n            const {type,...newState} = action;\r\n            return {...state,isLoading:true,...newState};\r\n        case appConstant.GET_CITY_RESPONSE:\r\n            return {...state, cityList:action.cityList, isLoading:false};\r\n        case appConstant.WEATHER_RESPONSE:\r\n            return {...state, weatherDetail:action.weatherDetail, isLoading:false};\r\n        default:\r\n            return {...state};      \r\n    }\r\n}","import React,{useState} from 'react';\r\nimport { throttle  } from \"throttle-debounce\";\r\n\r\nconst WeatherInputComponent = props =>{\r\n\r\n    const [selectedValue,setSelectedValue] = useState('');\r\n    const [showOption,setshowOption] = useState(props.cityList.length>0);\r\n\r\n\r\n    const onChange= e =>{ \r\n        setSelectedValue(e.target.value);\r\n        if(e.target.value){\r\n            props.getCityList({\"city\":e.target.value});\r\n            setshowOption(true);\r\n        }\r\n    }\r\n\r\n    const handleClickCityOption = e => {\r\n        setSelectedValue(e.title);\r\n        setshowOption(false);\r\n        props.getWeather({\"id\":e.id});\r\n        \r\n    }\r\n\r\n    return (<>\r\n        <input \r\n            type=\"text\" \r\n            className={`inputText ${(showOption && `selection-option`)||''}`} \r\n            onChange={e=>throttle(10000, onChange(e))}\r\n            value={selectedValue}\r\n            required/>\r\n       <span className=\"floating-label\">Select City</span>   \r\n       {showOption &&  <ul>\r\n            {props.cityList.map(obj=><li key={obj.id} id={obj.id} onClick={e=>handleClickCityOption({...obj})}>{obj.title}</li>)}\r\n        </ul>} \r\n    </>)\r\n}\r\n\r\nexport default WeatherInputComponent;","import React from 'react';\r\nimport { head } from 'lodash';\r\nimport { makeStyles } from '@material-ui/core/styles';\r\nimport Table from '@material-ui/core/Table';\r\nimport TableBody from '@material-ui/core/TableBody';\r\nimport TableCell from '@material-ui/core/TableCell';\r\nimport TableContainer from '@material-ui/core/TableContainer';\r\nimport TableHead from '@material-ui/core/TableHead';\r\nimport TableRow from '@material-ui/core/TableRow';\r\nimport Paper from '@material-ui/core/Paper';\r\n\r\nconst useStyles = makeStyles({\r\n    table: {\r\n      minWidth: 650,\r\n      zIndex:0,\r\n      position:'fixed'\r\n    },\r\n    mainHeader:{\r\n        fontWeight:900,\r\n    },\r\n    header:{\r\n        fontWeight:800,\r\n    }\r\n});\r\n\r\nconst WeatherDetailComponent = props =>{\r\n\r\n    const classes = useStyles();\r\n\r\n    const getTime = timeStamp=>{\r\n        var options = {\r\n            weekday: 'short',\r\n            month: 'short',\r\n            day: 'numeric',\r\n            hour: 'numeric', minute: 'numeric', second: 'numeric', \r\n        },\r\n        intlDate = new Intl.DateTimeFormat( undefined, options );\r\n        return intlDate.format( new Date( 1000 * timeStamp) );\r\n    }\r\n    return  <TableContainer component={Paper}>\r\n                <Table className={classes.table} aria-label=\"simple table\">\r\n                <TableHead className={classes.header}>\r\n                    <TableRow>\r\n                        <TableCell colSpan=\"3\" align=\"left\"></TableCell>\r\n                        <TableCell className={classes.mainHeader} colSpan=\"2\" align=\"left\">Conditions</TableCell>\r\n                        <TableCell className={classes.mainHeader} colSpan=\"2\" align=\"left\">Comfort</TableCell>\r\n                    </TableRow>\r\n                </TableHead>    \r\n                <TableHead>\r\n                    <TableRow>\r\n                        <TableCell className={classes.header} align=\"left\">Date & Time</TableCell>\r\n                        <TableCell className={classes.header} align=\"left\"></TableCell>\r\n                        <TableCell className={classes.header} align=\"left\">Temperature</TableCell>\r\n                        <TableCell className={classes.header} align=\"left\">Weather</TableCell>\r\n                        <TableCell className={classes.header} align=\"left\">Humidity</TableCell>\r\n                        <TableCell className={classes.header} align=\"left\">Wind Speed</TableCell>\r\n                        <TableCell className={classes.header} align=\"left\">Feels like</TableCell>\r\n                    </TableRow>\r\n                </TableHead>\r\n                <TableBody>\r\n                {props.weatherDetail.map(obj=>{\r\n                    const weather=head(obj['weather']);\r\n                    return <TableRow key={obj.dt}>\r\n                                <TableCell align=\"left\">{getTime(obj.dt)}</TableCell>\r\n                                <TableCell align=\"left\"><img alt={obj.dt} src={`https://openweathermap.org/img/w/${weather['icon']}.png`} width=\"40\" height=\"40\"/></TableCell>\r\n                                <TableCell align=\"left\">\r\n                                    {`${obj['main']['temp_min']}/${obj['main']['temp_max']} °C`}\r\n                                </TableCell>\r\n                                <TableCell align=\"left\">{`${weather['main']} (${weather['description']})`}</TableCell>\r\n                                <TableCell align=\"left\">{`${obj['main']['humidity']}%`}</TableCell>\r\n                                <TableCell align=\"left\">{`${obj['wind']['speed']}mps`}</TableCell>\r\n                                <TableCell align=\"left\">{obj['main']['temp']}</TableCell>\r\n                            </TableRow>\r\n                        })}\r\n                    </TableBody>\r\n                </Table>\r\n            </TableContainer>    \r\n}\r\n\r\nexport default WeatherDetailComponent;","\r\nconst headers = {\"content-type\":\"application/json;charset=UTF-8\"};\r\n\r\nconst getApiResponse = payload =>{\r\n    return fetch(payload,{...headers,method:'GET'})\r\n    .then(res=> {\r\n        \r\n        return res;\r\n    })\r\n    .then(res=>res.json());    \r\n}\r\n\r\n\r\nexport const getCityListService = payload =>{\r\n    // const URL = `http://localhost:4000/search?name=${payload && payload.city||''}`;\r\n    const URL = `https://city-list-for-weather.herokuapp.com/search?name=${(payload && payload.city)||''}`;\r\n    let cityList=[];\r\n    return getApiResponse(URL).then(resp=>{\r\n        return new Promise((resolve,reject)=>{\r\n            cityList=resp.data.map(obj=>({\"title\":`${obj[\"name\"]} ${obj[\"country\"]}`,\"id\":obj[\"id\"]}));\r\n            resolve(cityList);\r\n        }).then(resp=>resp);\r\n    })\r\n}\r\n\r\nexport const getCityWeatherService = payload=>{\r\n    const URL= `https://api.openweathermap.org/data/2.5/forecast?id=${((payload && payload.id)||'14256')}&APPID=771d67e00059108e0fb1d280194d3bf2`;\r\n    return getApiResponse(URL).then(resp=>resp);\r\n}","import { getCityListService, getCityWeatherService } from './api';\r\nimport { appConstant } from './constant';\r\n\r\nexport const getCityListAction = payload =>{\r\n    \r\n    return dispatch=>{\r\n        getCityListService(payload).then(resp=>{\r\n            if(resp){\r\n                dispatch({\r\n                    type: appConstant.GET_CITY_RESPONSE,\r\n                    cityList:resp\r\n                });\r\n        }\r\n    })\r\n}}\r\n\r\nexport const getWeatherAction = payload =>{\r\n    return dispatch=>{\r\n        dispatch({type:appConstant.LOADING,weatherDetail:[]});\r\n        getCityWeatherService(payload)\r\n        .then(resp=>{\r\n            dispatch({\r\n                type:appConstant.WEATHER_RESPONSE,\r\n                weatherDetail:resp.list\r\n            });\r\n        })\r\n    }\r\n}","import React,{ Component } from 'react';\r\nimport {connect} from 'react-redux'; \r\nimport {isEmpty} from 'lodash';\r\nimport CircularProgress from '@material-ui/core/CircularProgress';\r\nimport WeatherInputComponent from './WeatherInputComponent';\r\nimport WeatherDetailComponent from './WeatherDetailComponent';\r\nimport { getCityListAction, getWeatherAction } from './actions';\r\n\r\nclass WeatherContainer extends Component{\r\n    \r\n    constructor(props){\r\n        super(props);\r\n        this.state={\r\n            isEmptyTextbox:''\r\n        }\r\n    }\r\n\r\n    getCityList=payload=> this.props.getCityList(payload);\r\n\r\n    getWeather=payload=> this.props.getWeather(payload);\r\n\r\n    render(){\r\n        const {cityList, weatherDetail, isLoading} = this.props;\r\n\r\n        return(\r\n            <>\r\n                <WeatherInputComponent cityList={cityList} getCityList={this.getCityList} getWeather={this.getWeather}/>\r\n                {isLoading && <CircularProgress />}\r\n                {((!isEmpty(weatherDetail) && <WeatherDetailComponent weatherDetail={weatherDetail}/>) || null)}\r\n            </>\r\n        )\r\n    }\r\n}\r\n\r\nconst mapStateToProps = state =>{\r\n    return {\r\n        isLoading: state.isLoading,\r\n        cityList: state.cityList||[],\r\n        weatherDetail: state.weatherDetail||[]\r\n    }\r\n}\r\n\r\nconst mapDispatchToProps = dispatch =>({\r\n    getCityList : params=>getCityListAction(params)(dispatch),\r\n    getWeather :  params=>getWeatherAction(params)(dispatch)    \r\n})\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(WeatherContainer);","import React from 'react';\r\nimport {Provider} from 'react-redux';\r\nimport { createStore, applyMiddleware } from 'redux';\r\nimport thunk from 'redux-thunk';\r\nimport { composeWithDevTools } from 'redux-devtools-extension';\r\n\r\nimport './App.css';\r\nimport {rootReducer} from './reducers';\r\nimport WeatherContainer from './WeatherContainer';\r\n\r\nconst store = createStore(rootReducer, \r\n                            composeWithDevTools(\r\n                                applyMiddleware(thunk),\r\n                                // other store enhancers if any\r\n                            ));\r\n\r\nconst App = props => <Provider store={store}><WeatherContainer/></Provider>\r\n\r\nexport default App;","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport App from './App';\r\nimport registerServiceWorker from './registerServiceWorker';\r\nimport './index.css';\r\n\r\nReactDOM.render(<App />, document.getElementById('root'));\r\nregisterServiceWorker();\r\n","// In production, we register a service worker to serve assets from local cache.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on the \"N+1\" visit to a page, since previously\r\n// cached resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model, read https://goo.gl/KwvDNy.\r\n// This link also includes instructions on opting out of this behavior.\r\n\r\nexport default function register() {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n      navigator.serviceWorker\r\n        .register(swUrl)\r\n        .then(registration => {\r\n          registration.onupdatefound = () => {\r\n            const installingWorker = registration.installing;\r\n            installingWorker.onstatechange = () => {\r\n              if (installingWorker.state === 'installed') {\r\n                if (navigator.serviceWorker.controller) {\r\n                  // At this point, the old content will have been purged and\r\n                  // the fresh content will have been added to the cache.\r\n                  // It's the perfect time to display a \"New content is\r\n                  // available; please refresh.\" message in your web app.\r\n                  console.log('New content is available; please refresh.');\r\n                } else {\r\n                  // At this point, everything has been precached.\r\n                  // It's the perfect time to display a\r\n                  // \"Content is cached for offline use.\" message.\r\n                  console.log('Content is cached for offline use.');\r\n                }\r\n              }\r\n            };\r\n          };\r\n        })\r\n        .catch(error => {\r\n          console.error('Error during service worker registration:', error);\r\n        });\r\n    });\r\n  }\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n"],"sourceRoot":""}