{"version":3,"sources":["App.js","index.js","registerServiceWorker.js"],"names":["App","state","products","flg","timeStamp","options","weekday","month","day","intlDate","Intl","DateTimeFormat","undefined","format","Date","e","which","this","weatherForecast","city","document","getElementById","value","trim","axios","get","then","response","console","log","request","array","det","JSON","parse","i","a","dt","getTime","img","temp","weather","humid","wd_speed","fl","chance","amt","push","setState","bind","catch","error","className","id","type","placeholder","onKeyUp","handleKey","onClick","length","data","row","colSpan","dataField","isKey","dataFormat","imgCol","Component","ReactDOM","render","navigator","window","addEventListener","swUrl","process","serviceWorker","register","registration","onupdatefound","installingWorker","installing","onstatechange","controller"],"mappings":"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","file":"static/js/main.a7e502f4.chunk.js","sourcesContent":["import React, { Component } from 'react';\r\nimport './App.css';\r\nimport axios from \"axios\";\r\n\r\nimport { BootstrapTable, TableHeaderColumn } from 'react-bootstrap-table';\r\n\r\nclass App extends Component {\r\n\t\tconstructor(){\r\n          super();\r\n          this.state = {products: [],flg:false};\r\n        }\r\n\t\tgetTime(timeStamp=''){\r\n\t\t\tvar options = {\r\n\t\t\t\tweekday: 'short',\r\n\t\t\t\tmonth: 'short',\r\n\t\t\t\tday: 'numeric',\r\n\t\t\t},\r\n\t\t\tintlDate = new Intl.DateTimeFormat( undefined, options );\r\n\t\t\treturn intlDate.format( new Date( 1000 * timeStamp) );\r\n\t\t}\r\n\t\thandleKey(e)\r\n\t\t{\r\n\t\t\tif(e.which===13)\r\n\t\t\t\tthis.weatherForecast(e);\r\n\t\t}\r\n\t\tweatherForecast(e){\r\n\t\t\tvar city = document.getElementById('city').value;\r\n\t\t\tif(city.trim()===\"\")\r\n\t\t\t\treturn false;\r\n\t\t\t\r\n\t\t   axios.get('http://openweathermap.org/data/2.5/forecast?q='+city+'&appid=b1b15e88fa797225412429c1c50c122a1')\r\n              .then(function (response) {\r\n\t\t\t\t        console.log(response.request.response)\r\n\t\t\t\t\t\tvar array =[];\t\r\n\t\t\t\t\t\tvar det = JSON.parse(response.request.response);\r\n\t\t\t\t\t\tfor(var i=0;i<5;i++){\r\n\t\t\t\t\t\t\t\tvar dt = this.getTime(det['list'][i]['dt']);\r\n\t\t\t\t\t\t\t\tvar a= ({dt:dt,\r\n\t\t\t\t\t\t\t\t\t\timg:det['list'][i]['weather']['0']['icon'],\r\n\t\t\t\t\t\t\t\t\t\ttemp:det['list'][i]['main']['temp_min']+'/'+det['list'][i]['main']['temp_max']+ ' °C',\r\n\t\t\t\t\t\t\t\t\t\tweather:det['list'][i]['main']['temp_min']+'°C',\r\n\t\t\t\t\t\t\t\t\t\thumid:det['list'][i]['main']['humidity']+'%',\r\n\t\t\t\t\t\t\t\t\t\twd_speed:det['list'][i]['wind']['speed']+' mps',\r\n\t\t\t\t\t\t\t\t\t\tfl:det['list'][i]['main']['temp'],\r\n\t\t\t\t\t\t\t\t\t\tchance:'-',\r\n\t\t\t\t\t\t\t\t\t\tamt:'-'\r\n\t\t\t\t\t\t\t\t\t\t});\r\n\t\t\t\t\t\t\t\t\t\t\r\n\t\t\t\t\t\t\t\t\tarray.push(a);\t\r\n\t\t\t\t\t\t\t\t}\t\r\n\t\t\t\t\t\t\t\t\r\n\t\t\t\t\t\tthis.setState({\r\n\t\t\t\t\t\t\tproducts: array,\r\n\t\t\t\t\t\t\tflg:true\r\n\t\t\t\t\t\t});\r\n                /// and you can get response with this.state.todos in your className\r\n              }.bind(this))\r\n             .catch(function (error) {\r\n\t\t\t\tconsole.log(error);\r\n             });\r\n\t\t   \r\n\t\t}\r\n\t  imgCol(img){\r\n\t  return '<img src=\"http://openweathermap.org/img/w/'+img+'.png\" width=\"40\" height=\"40\"/>';\r\n\t  }\r\n\t  render() {\r\n\t\treturn (\r\n\t\t <div className=\"container\">\r\n\t\t\t<div className=\"row\">\r\n\t\t\t\t<div className=\"col-md-6\">\r\n\t\t\t\t\t<h2>Search Weather here</h2>\r\n\t\t\t\t\t<div id=\"custom-search-input\">\r\n\t\t\t\t\t\t<div className=\"input-group col-md-12\">\r\n\t\t\t\t\t\t\t<input id=\"city\" type=\"text\" className=\"form-control input-lg\" placeholder=\"Eg: London\" onKeyUp={this.handleKey.bind(this)} />\r\n\t\t\t\t\t\t\t<span className=\"input-group-btn\">\r\n\t  <button className=\"btn btn-info btn-lg\" type=\"button\" onClick={this.weatherForecast.bind(this)}>\r\n\t\t\t\t\t\t\t\t\t<i className=\"glyphicon glyphicon-search\"></i>\r\n\t\t\t\t\t\t\t\t</button>\r\n\t\t\t\t\t\t\t</span>\r\n\t\t\t\t\t\t</div>\r\n\t\t\t\t\t</div>\r\n\t\t\t\t</div>\r\n\t\t\t</div>\t\t\t\r\n\t\t\t{(this.state.products.length>0)?\r\n\t\t\t<BootstrapTable data={ this.state.products }>\r\n\t\t\t\t<TableHeaderColumn row='0' colSpan='1' dataField='dt' isKey={ true } ></TableHeaderColumn>\r\n\t\t\t\t<TableHeaderColumn row='0' colSpan='3'>Conditions</TableHeaderColumn>\r\n\t\t\t\t<TableHeaderColumn row='0' colSpan='3'>Comfort</TableHeaderColumn>\r\n\t\t\t\t<TableHeaderColumn row='0' colSpan='2'>Precipitation</TableHeaderColumn>\r\n\t\t\t\t<TableHeaderColumn row='1' dataField='dt'>Day</TableHeaderColumn>\r\n\t\t\t\t<TableHeaderColumn row='1' dataField='img' dataFormat={this.imgCol.bind(this)}></TableHeaderColumn>\r\n\t\t\t\t<TableHeaderColumn row='1' dataField='temp'>Temperature</TableHeaderColumn>\r\n\t\t\t\t<TableHeaderColumn row='1' dataField='weather'>Weather</TableHeaderColumn>\r\n\t\t\t\t<TableHeaderColumn row='1' dataField='fl'>Feels Like</TableHeaderColumn>\r\n\t\t\t\t<TableHeaderColumn row='1' dataField='wd_speed'>Wind</TableHeaderColumn>\r\n\t\t\t\t<TableHeaderColumn row='1' dataField='humid'>Humidity</TableHeaderColumn>\r\n\t\t\t\t<TableHeaderColumn row='1' dataField='chance'>Chance</TableHeaderColumn>\r\n\t\t\t\t<TableHeaderColumn row='1' dataField='amt'>Amount</TableHeaderColumn>\r\n\t\t\t</BootstrapTable>\r\n\t\t\t:\"\"}\r\n\t\t\t\r\n\t\t</div>\r\n\t\t);\r\n\t  }\r\n}\r\n\r\nexport default App;\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport App from './App';\r\nimport registerServiceWorker from './registerServiceWorker';\r\nimport './index.css';\r\n\r\nReactDOM.render(<App />, document.getElementById('root'));\r\nregisterServiceWorker();\r\n","// In production, we register a service worker to serve assets from local cache.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on the \"N+1\" visit to a page, since previously\r\n// cached resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model, read https://goo.gl/KwvDNy.\r\n// This link also includes instructions on opting out of this behavior.\r\n\r\nexport default function register() {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n      navigator.serviceWorker\r\n        .register(swUrl)\r\n        .then(registration => {\r\n          registration.onupdatefound = () => {\r\n            const installingWorker = registration.installing;\r\n            installingWorker.onstatechange = () => {\r\n              if (installingWorker.state === 'installed') {\r\n                if (navigator.serviceWorker.controller) {\r\n                  // At this point, the old content will have been purged and\r\n                  // the fresh content will have been added to the cache.\r\n                  // It's the perfect time to display a \"New content is\r\n                  // available; please refresh.\" message in your web app.\r\n                  console.log('New content is available; please refresh.');\r\n                } else {\r\n                  // At this point, everything has been precached.\r\n                  // It's the perfect time to display a\r\n                  // \"Content is cached for offline use.\" message.\r\n                  console.log('Content is cached for offline use.');\r\n                }\r\n              }\r\n            };\r\n          };\r\n        })\r\n        .catch(error => {\r\n          console.error('Error during service worker registration:', error);\r\n        });\r\n    });\r\n  }\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n"],"sourceRoot":""}